{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models\nimport matplotlib.pyplot as plt\n\n# Load CIFAR-10 dataset\n(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()\n\n# Resize images to 224x224 (AlexNet original input size)\ntrain_images_resized = tf.image.resize(train_images, (224, 224))\ntest_images_resized = tf.image.resize(test_images, (224, 224))\n\n# Normalize the pixel values to be between 0 and 1\ntrain_images_resized, test_images_resized = train_images_resized / 255.0, test_images_resized / 255.0\n\n# Print the new shape of the images\nprint(f\"Train images shape: {train_images_resized.shape}\")\nprint(f\"Test images shape: {test_images_resized.shape}\")\n\ndef alexnet(input_shape=(224, 224, 3), num_classes=10):\n    model = models.Sequential()\n\n    # Convolutional Layer 1\n    model.add(layers.Conv2D(96, (11, 11), strides=4, activation='relu', input_shape=input_shape))\n    model.add(layers.MaxPooling2D((3, 3), strides=2))\n\n    # Convolutional Layer 2\n    model.add(layers.Conv2D(256, (5, 5), padding='same', activation='relu'))\n    model.add(layers.MaxPooling2D((3, 3), strides=2))\n\n    # Convolutional Layer 3\n    model.add(layers.Conv2D(384, (3, 3), padding='same', activation='relu'))\n\n    # Convolutional Layer 4\n    model.add(layers.Conv2D(384, (3, 3), padding='same', activation='relu'))\n\n    # Convolutional Layer 5\n    model.add(layers.Conv2D(256, (3, 3), padding='same', activation='relu'))\n    model.add(layers.MaxPooling2D((3, 3), strides=2))\n\n    # Flatten the results\n    model.add(layers.Flatten())\n\n    # Fully connected layer 1\n    model.add(layers.Dense(4096, activation='relu'))\n\n    # Fully connected layer 2\n    model.add(layers.Dense(4096, activation='relu'))\n\n    # Output layer\n    model.add(layers.Dense(num_classes, activation='softmax'))\n\n    return model\n\n# Create the AlexNet model\nmodel = alexnet()\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nhistory = model.fit(train_images_resized, train_labels, epochs=10, \n                    validation_data=(test_images_resized, test_labels))\n\n# Evaluate the model\ntest_loss, test_acc = model.evaluate(test_images_resized, test_labels, verbose=2)\nprint(f\"Test accuracy: {test_acc}\")\n\n\n# Plot training accuracy and loss\nplt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['val_accuracy'], label='val_accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.ylim([0, 1])\nplt.legend(loc='lower right')\nplt.show()\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-06T00:31:09.735718Z","iopub.execute_input":"2024-11-06T00:31:09.736743Z"}},"outputs":[{"name":"stdout","text":"Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n\u001b[1m170498071/170498071\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 0us/step\n","output_type":"stream"}],"execution_count":null}]}